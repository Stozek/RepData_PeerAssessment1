Data = run_analysis()
source('~/run_analysis.R')
Data = run_analysis()
source('~/run_analysis.R')
Data = run_analysis()
getwd()
read.table("https://s3.amazonaws.com/coursera-uploads/user-ff544b562e25850c15443355/975115/asst-3/49afda903b4211e5ac6c5ddbaca41a44.txt")
X <- read.table("https://s3.amazonaws.com/coursera-uploads/user-ff544b562e25850c15443355/975115/asst-3/49afda903b4211e5ac6c5ddbaca41a44.txt")
View(X)
X <- read.table("https://s3.amazonaws.com/coursera-uploads/user-ff544b562e25850c15443355/975115/asst-3/49afda903b4211e5ac6c5ddbaca41a44.txt", header = TRUE)
X = read.table("https://s3.amazonaws.com/coursera-uploads/user-ce0b3e91913cf61a98dbff90/975115/asst-3/1f1dbaf0493311e58f0b5d478ddef3ba.txt")
X = read.table("https://s3.amazonaws.com/coursera-uploads/user-ce0b3e91913cf61a98dbff90/975115/asst-3/1f1dbaf0493311e58f0b5d478ddef3ba.txt", header = TRUE)
View(X)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "whatever.csv")
read.csv("whatever.csv")
X = read.csv("whatever.csv")
strsplit(colnames(X), "wgt")
strsplit(colnames(X), "wgtp")
X = read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ")
X = read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
X
A = X[5:194, 3]
A = X[5:194, ]
A
A[, 3]
A[, 4]
A[, 5]
A = A[, 5]
A = gsub(",", "", A)
A
A = as.numeric(A)
A
mean(A)
X = read.csv2("whatever.csv")
X
X = read.csv("whatever.csv", header = TRUE)
X
X = read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", header = TRUE)
X
X[, 4]
A = X[5:194, 4]
A
grep("^United", A)
grepl("^United", A)
sum(grepl("^United", A))
sum(grepl("United", A))
X = X[5:194,]
X
X[,1]
X[,2]
X[,3]
X[,4]
X[,5]
X[,6]
X[,7]
X[,8]
X[,9]
X[,10]
x = X[,c(1,2,4,5)]
x
Y = read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
Y
head(Y)
library(dplyr)
z = merge(x, Y, by.x = 1, by.y = 1)
z
names(z)
z[,14]
z[,15]
z[,5]
z[,6]
z[,7]
z[,8]
z[,9]
z[,10]
z[,11]
z[,12]
z[,13]
sum(grepl("[Jj]une", z[,13]))
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
amzn
head(amzn)
sampleTimes
sum(grepl("^2012", sampleTimes))
wday(2012-09-08)
weekday(2012-09-08)
weekdays(2012-09-08)
weekdays
weekdays()
weekdays("2012-09-08")
as.Posixlt("2012-09-08")$wday
as.POSIXlt("2012-09-08")$wday
as.POSIXlt("2015-08-27")$wday
sum(grepl("^2012", sampleTimes) & as.POSIXlt(sampleTimes)$wday == 1)
sum(grepl("^2012", sampleTimes) & as.POSIXlt(sampleTimes)$wday == 2)
sum(grepl("[Jj]une", z[,13]))
z[,13]
sum(grepl("Fiscal year end: June", z[,13]))
Z =  c(4096,     0.000,
8192,     0.001,
16384,     0.001,
32768,     0.004,
65536,     0.009,
131072,     0.024,
262144,     0.064,
524288,     0.166,
1048576,     0.433,
2097152 ,    1.133,
4194304,     2.959,
8388608,     7.722,
16777216,    20.157,
33554432 ,   52.639,
67108864 ,  137.438,
134217728 ,  358.844,
268435456,   937.023,
536870912,  2446.405)
x = Z[Z%2 == 0]
x = Z[Z % 2 == 0]
seq(1,1,3)
seq(1,3,1)
seq(1,3,2)
x = seq(1, length(Z),2)
y = seq(2, length(Z),2)
Z[0]
x = Z[x]
y = Z[y]
lm(y ~ x)
log(x)
log(2)
log2(2)
X = log2(x)
y = log2(y)
y = Z[y]
y = seq(2, length(Z),2)
y = Z[y]
Y = log2(y)
lm(x ~ y)
lm(y ~ x)
lm(Y ~ X)
lm(Y[2:] ~ X[2:])
lm(Y[2:lenght(Y)] ~ X[2:length(X)])
lm(Y[2:length(Y)] ~ X[2:length(X)])
Y - (-28.610 * X + 1.373)
Y - (-28.610 + 1.373 * X)
lm(Y[3:length(Y)] ~ X[3:length(X)])
lm(Y[4:length(Y)] ~ X[4:length(X)])
lm(Y[5:length(Y)] ~ X[5:length(X)])
lm(Y[6:length(Y)] ~ X[6:length(X)])
Z = c(512     0.000
1024     0.001
2048     0.004
4096     0.014
8192     0.051
16384     0.196
32768     0.749
65536     2.879
131072    10.920
262144    42.020
524288   159.967
1048576   610.800
2097152  2333.202)
Z = c(512,     0.000,
1024,     0.001,
2048,     0.004,
4096,     0.014,
8192,     0.051,
16384,     0.196,
32768,     0.749,
65536,     2.879,
131072,    10.920,
262144,    42.020,
524288,   159.967,
1048576,  610.800,
2097152,  2333.202)
x = seq(1, length(Z),2)
y = seq(2, length(Z),2)
x = Z[x]
y = Z[y]
X = log2(x)
Y = log2(y)
lm(Y ~ X)
count = 2:lenght(X)
count = 2:length(X)
lm(Y[count:length(X)] ~ X[count:length(Y)])
lm(Y[2:length(X)] ~ X[2:length(Y)])
lm(Y[3:length(X)] ~ X[3:length(Y)])
lm(Y[4:length(X)] ~ X[4:length(Y)])
lm(Y[5:length(X)] ~ X[5:length(Y)])
lm(Y[6:length(X)] ~ X[6:length(Y)])
lm(Y[7:length(X)] ~ X[7:length(Y)])
table = read.csv("repdata-data-activity/activity.csv")
table[,2] = as.Date(table[,2]) ## making dates have date format
library(dplyr) ## loading useful libraries
library(ggplot2)
table_grouped = group_by(table, date) ## grouping records by day
tot_days = summarise(data = table_grouped, sum = sum(steps))
qplot(tot_days$sum, geom = histogram)
median(c(1,2,3))
table$interval
?plot
table_grouped_int = group_by(table, interval) ## grouping records by interval
avg_steps = summarise(table_grouped_int, avg = mean(steps, na.rm = TRUE))
plot(table_grouped_int$interval, table_grouped_int$avg, typ = "l")
library(ggplot2)
?qplot
table = read.csv("repdata-data-activity/activity.csv")
table[,2] = as.Date(table[,2]) ## making dates have date format
library(dplyr) ## loading useful libraries
library(ggplot2)
table_grouped_int = group_by(table, interval) ## grouping records by interval
avg_steps = summarise(table_grouped_int, avg = mean(steps, na.rm = TRUE))
qplot(x = interval, y = avg, data = avg_steps, xlab = "Interval", ylab =  "Steps taken (average)", geom = "lines")
qplot(x = interval, y = avg, data = avg_steps, xlab = "Interval", ylab =  "Steps taken (average)", geom = "line")
sum(is.na(table$steps))/17568
max(avg_steps$avg)
835/5
167/60
?apply
?tapply
?mapply
?sapply
?vapply
vapply(c(1,2,3),function(x){x*2})
vapply(c(1,2,3),function(x){x*2}, numeric(1))
?apply
apply(table, 1, function(X){if (is.na(X$steps)){X$steps = avg_steps$avg[avg_steps$interval == X$interval]}})
apply(table, 1, function(X){if (is.na(X[2])){X[2] = avg_steps$avg[avg_steps$interval == X[1]]}})
table
is.na(table$steps)
A = apply(table, 1, function(X){if (is.na(X[1])){X[1] = avg_steps$avg[avg_steps$interval == X[3]]}})
A = apply(table, 1, function(X){if (is.na(X[1])) {X[1] = avg_steps$avg[avg_steps$interval == X[3]]}})
A = table[9997,]
A
X = A
if (is.na(X[1])) {X[1] = avg_steps$avg[avg_steps$interval == X[3]]}
X
X[1]
is.na(X[1])
X[1] = avg_steps$avg[avg_steps$interval == X[3]]
X[1]
avg_steps$avg[avg_steps$interval == X[3]]
A = apply(table, 1, function(X){if (is.na(X[[1]])) {X[[1]] = avg_steps$avg[avg_steps$interval == X[[3]]}})
A = apply(table, 1, function(X){if (is.na(X[[1]])) {X[[1]] = avg_steps$avg[avg_steps$interval == X[[3]]]}})
X[[1]] = avg_steps$avg[avg_steps$interval == X[[3]]
]
X
A = apply(table, 1, function(X){if (is.na(X[[1]])) {X[[1]] = avg_steps$avg[avg_steps$interval == X[[3]]]}})
traceback()
A = table[is.na(table[,1]),]
A
B = apply(A, 1, function(X){if (is.na(X[[1]])) {X[[1]] = avg_steps$avg[avg_steps$interval == X[[3]]]}})
apply(A, 1, function(X){if (is.na(X[[1]])) {print sum(avg_steps$avg[avg_steps$interval == X[[3]]])}})
apply(A, 1, function(X){if (is.na(X[[1]])) {print(sum(avg_steps$avg[avg_steps$interval == X[[3]]])}})
A
length(A)
A
apply(A, 1, function(X){if (is.na(X[[1]])) {print(sum(avg_steps$avg[avg_steps$interval == X[[3]]]))}})
apply(A, 1, function(X){if (is.na(X[[1]])) {print(sum(avg_steps$interval == X[[3]]))}})
A$interval
avg_steps$interval
288*5
as.POSIXct(105, %H%m)
as.POSIXct(105, %H %m)
as.POSIXct(105, %H %M)
?as.POSIXct
as.POSIXct(1005, %H %M)
as.POSIXct(1005, %H%M)
as.POSIXct(10:05, %H : %M)
as.POSIXct(10:05, format = %H : %M)
as.POSIXct(10:05, format = "%H : %M")
as.POSIXlt(10:05, format = "%H : %M")
A = apply(table, 1, function(X){if (is.na(X[[1]])) {X[[1]] = avg_steps$avg[avg_steps$interval == X[[3]]]}})
A = apply(table, 1, function(X){if (is.na(X[[1]])) {X[[1]] = avg_steps$avg[[avg_steps$interval == X[[3]]]]}})
A = apply(table, 1, function(X){print(avg_steps$avg[[avg_steps$interval == X[[3]]]])
}
)
A = apply(table, 1, function(X){if (is.na(X[[1]])) {X[[1]] = avg_steps$avg[avg_steps$interval == X[[3]]]}})
A = apply(table, 1, function(X){if (is.na(X[[1]])) {X[[1]] = avg_steps$avg[[avg_steps$interval == X[[3]]]]}})
A = apply(table, 1, function(X){if (is.na(X[[1]])) {X[[1]] = avg_steps$avg[avg_steps$interval == X[[3]],]}})
A = apply(table, 1, function(X){if (is.na(X[[1]])) {X[[1]] = avg_steps$avg[avg_steps$interval == X[3]]}})
A = apply(table, 1, function(X){if (is.na(X[[1]])) {X[[1]] = avg_steps$avg[avg_steps$interval == 10}})
A = apply(table, 1, function(X){if (is.na(X[[1]])) {X[[1]] = avg_steps$avg[avg_steps$interval == 10]}})
A
table = read.csv("repdata-data-activity/activity.csv")
table[,2] = as.Date(table[,2]) ## making dates have date format
A = table
is.na(A[[1]])
sum(is.na(A[[1]]))
apply(A, 1, function(X){if (is.na(X[[1]])) {X[[1]] = avg_steps$avg[avg_steps$interval == 10]}})
sum(is.na(A[[1]]))
A = table
apply(A, 1, function(X){if (is.na(X[[1]])) {X[[1]] = avg_steps$avg[avg_steps$interval == 10]} else {X[[1]] = X[[1]]}})
bable = table
for (i = 1:length(bable[1,]) {if (is.na(bable[[i,1]])){bable[[i,1]] = avg_steps[[avg_steps$interval == bable[[i,3]], 2]]}}
for (i in 1:length(bable[1,]) {if (is.na(bable[[i,1]])){bable[[i,1]] = avg_steps[[avg_steps$interval == bable[[i,3]], 2]]}}
for (i in 1:length(bable[1,]) if (is.na(bable[[i,1]])) bable[[i,1]] = avg_steps[[avg_steps$interval == bable[[i,3]], 2]]
length(bable[[1,]])
length(bable[1,])
length(bable[,1])
for (i in 1:length(bable[,1]) if (is.na(bable[[i,1]])) bable[[i,1]] = avg_steps[[avg_steps$interval == bable[[i,3]], 2]]
for (i in 1:length(bable[,1])) if (is.na(bable[[i,1]])) bable[[i,1]] = avg_steps[[avg_steps$interval == bable[[i,3]], 2]]
for (i in 1:length(bable[,1])) if (is.na(bable[[i,1]])) bable[[i,1]] = avg_steps[[avg_steps$interval == bable[i,3], 2]]
is.na(table[[,1]])
is.na(table[,1])
bable
bable[1,1]
apply(bable, 1,function(X) if (is.na(X[1])) X[1] = avg_steps[avg_steps[1] == X[3], 2]
)
is.na(bable$steps)
bable[,1] apply(bable, 1,function(X) if (is.na(X[1])) avg_steps[avg_steps[1] == X[3], 2] else X[1])
bable[,1] = apply(bable, 1,function(X) if (is.na(X[1])) avg_steps[avg_steps[1] == X[3], 2] else X[1])
apply(bable, 1,function(X) if (is.na(X[1])) avg_steps[avg_steps[1] == X[3], 2] else X[1])
A = apply(bable, 1,function(X) if (is.na(X[1])) avg_steps[avg_steps[1] == X[3], 2] else X[1])
A
A = apply(bable, 1,function(X) if (is.na(X[1])) avg_steps[[avg_steps[1] == X[3], 2]] else X[1])
A = apply(bable, 1,function(X) if (is.na(X[1])) avg_steps[[avg_steps[1] == X[3], 2]] else X[1])
A = apply(bable, 1,function(X) if (is.na(X[1])) avg_steps[avg_steps[1] == X[3], 2] else X[1])
A
numeri(A)
numeric(A)
as.numeric(A)
B = as.numeric(A)
sum(is.na(B))
bable$steps
for (i in 1:length(B)) {if (is.na(bable$steps[i])) {bable$steps[i] <- avg_steps$steps[avg_steps$interval == bable$interval[i]]}}
for (i in 1:length(B)) {if (is.na(bable$steps[i])) {print (avg_steps$steps[avg_steps$interval == bable$interval[i]])}}
for (i in 1:length(B)) {if (is.na(bable$steps[i])) {sum(is.null(avg_steps$steps[avg_steps$interval == bable$interval[i]]))}}
for (i in 1:length(B)) {if (is.na(bable$steps[i])) {print(is.null(avg_steps$steps[avg_steps$interval == bable$interval[i]]))}}
for (i in 1:length(B)) {if (is.na(bable$steps[i])) {bable$steps[i] <- avg_steps$steps[avg_steps$interval == bable$interval[i]]}}
avg_steps$steps[avg_steps$interval == bable$interval[17568]]
bable$interval[17568]
avg_steps$steps[avg_steps$interval == 2355]
avg_steps$interval
avg_steps[avg_steps$interval == 2355]
avg_steps
avg_steps[interval == 2355]
avg_steps[avg_steps$interval == 2355]
avg_steps[avg_steps$interval == 1000]
avg_steps[avg_steps$interval == 5]
avg_steps
avg_steps[avg_steps$interval == 5, 1]
avg_steps[avg_steps$interval == 5, 2]
avg_steps[avg_steps$interval == bable$interval[17568], 2]
avg_steps[[avg_steps$interval == bable$interval[17568], 2]]
avg_steps[avg_steps$interval == bable$interval[17568], 2]
avg_steps[avg_steps$interval == bable$interval[17568], 2] - 1
as.numeric(avg_steps[avg_steps$interval == bable$interval[17568], 2])
for (i in 1:length(B)) {if (is.na(bable$steps[i])) {bable$steps[i] <- as.numeric(avg_steps[avg_steps$interval == bable$interval[i], 2])}}
is.na(bable[,1])
weekdays()
?weekdays()
weekdays(table$date)
Sys.time()
Sys.setlocale("LC_TIME","English")
mutate(table, Day_type = as.factor(if (weekdays[date] == "Saturday" | weekdays[date] == "Sunday") {"weekend"} else{"weekend"})
)
mutate(table, weekday  = as.factor(weekdays(date)))
mutate(table, weekday  = if (weekday == "Saturday" | weekday == "Sunday") "weekend" else "weekday")
mutate(table, weekday  = if (table$weekday == "Saturday" | weekday == "Sunday") "weekend" else "weekday")
names(table)
mutate(table, weekday  = as.factor(weekdays(date, abbreviate = TRUE)))
table = mutate(table, weekday  = as.factor(weekdays(date, abbreviate = TRUE)))
mutate(table, weekday  = if (weekday == "Saturday" | weekday == "Sunday") "weekend" else "weekday")
table = mutate(table, weekday  = if (weekday == "Saturday" | weekday == "Sunday") "weekend" else "weekday")
traceback()
mutate(table, weekday  = as.factor(weekdays(date)))
table = mutate(table, weekday  = as.factor(weekdays(date, abbreviate = TRUE)))
table
table = mutate(table, weekday  = if (weekday == "Sat" | weekday == "Sun") "weekend" else "weekday")
table
table = mutate(table, weekday  = as.factor(weekdays(date, abbreviate = TRUE)))
table
table = mutate(table, weekday  = if (weekday == "Sat" || weekday == "Sun") "weekend" else "weekday")
table
weekdays(as.Posixct(2012-10-06))
weekdays(as.POSIXct(2012-10-06))
weekdays(as.POSIXlt(2012-10-06))
weekdays(as.Date("2012-10-06"))
table = mutate(table, weekday  = as.factor(weekdays(date, abbreviate = TRUE)))
table
table = mutate(table, daytype  = if (weekday == "Sat" || weekday == "Sun") "weekend" else "weekday")
table
type(table$daytype)
class(table$daytype)
table = mutate(table, daytype  = as.factor(if (weekday == "Sat" || weekday == "Sun") "weekend" else "weekday"))
table
table$weekday
table$weekday = "Sun"
table$weekday
table$weekday == "Sun"
table = mutate(table, weekday  = as.factor(weekdays(date, abbreviate = TRUE)))
table$weekday == "Sun"
table = mutate(table, daytype  = (weekday == "Sat" || weekday == "Sun"))
table
table = mutate(table, daytype  = (weekday == "Sun"))
table
table = mutate(table, daytype  = (weekday == "Sun" | weekday == "Sat"))
table
table = mutate(table, daytype  = as.factor(if (weekday == "Sat" | weekday == "Sun") "weekend" else "weekday"))
table
table = mutate(table, daytype  = (weekday == "Sat" || weekday == "Sun"))
table
table = mutate(table, daytype  = (weekday == "Sat" | weekday == "Sun"))
table
table = mutate(table, daytype  = as.factor(if (daytype) "weekend" else "weekday"))
table
table = mutate(table, daytype  = (if (daytype) "weekend" else "weekday"))
table
table = mutate(table, daytype  = (weekday == "Sat" | weekday == "Sun"))
table
table = mutate(table, daytype  = (if (daytype) "weekend" else "weekday"))
table
table = mutate(table, daytype  = (weekday == "Sat" | weekday == "Sun"))
daytype = laply(tabel$date, function(x) {wd = weekdays(x) if(wd == "Sat" | wd == "Sun") return("weekend") else reurn("weekend")}
daytype = laply(tabel$date, function(x) {wd = weekdays(x) if (wd == "Sat" | wd == "Sun") return("weekend") else reurn("weekend")}
daytype = laply(tabel$date, function(x) {wd <- weekdays(x) if (wd == "Sat" | wd == "Sun") return("weekend") else reurn("weekend")}
daytype = laply(tabel$date, function(x) {wd <- weekdays(x)
if (wd == "Sat" | wd == "Sun") return("weekend") else reurn("weekend")}
)
daytype = lapply(tabel$date, function(x) {wd <- weekdays(x) if (wd == "Sat" | wd == "Sun") return("weekend") else reurn("weekend")}
daytype = lapply(tabel$date, function(x) {wd <- weekdays(x); if (wd == "Sat" | wd == "Sun") return("weekend") else reurn("weekend")}
)
daytype = lapply(table$date, function(x) {wd <- weekdays(x); if (wd == "Sat" | wd == "Sun") return("weekend") else reurn("weekend")})
daytype = lapply(table$date, function(x) {wd <- weekdays(x); if (wd == "Sat" | wd == "Sun") return("weekend") else return("weekend")})
daytype
as.factor(daytype)
class(daytype)
as.character(daytype)
sum(daytype == "weekday")
daytype = lapply(table$date, function(x) {wd <- weekdays(x); if (wd == "Sat" | wd == "Sun") return("weekend") else return("weekday")})
as.character(daytype)
daytype = lapply(table$date, function(x) {wd <- weekdays(x); if (wd == "Sat" || wd == "Sun") return("weekend") else return("weekday")})
as.character(daytype)
daytype = lapply(table$date, function(x) {wd <- as.character(weekdays(x)); if (wd == "Sat" | wd == "Sun") return("weekend") else return("weekday")})
daytype
as.character(daytype)
sum(daytype == "weekend")
daytype = lapply(table$date, weekdays)
daytype = as.factor(lapply(table$date, weekdays))
daytype = as.character(lapply(table$date, weekdays))
daytype = lapply(table$date, function(x) {wd <- as.character(weekdays(x), abbreviate = TRUE); if (wd == "Sat" | wd == "Sun") return("weekend") else return("weekday")})
as.character(daytype)
daytype = as.character(lapply(table$date, weekdays, abbreviate = TRUE))
daytype
dt = as.character(vapply(daytype, function(x) {if (x == "Sat") return("weekend") else return("weekend")}))
dt = as.character(lapply(daytype, function(x) {if (x == "Sat") return("weekend") else return("weekend")}))
dt
dt = as.character(lapply(daytype, function(x) {if (x == "Sat") return("weekend") else return("weekday")}))
dt
dt = as.character(lapply(daytype, function(x) {if (x == "Sat" | x == "Sun") return("weekend") else return("weekday")}))
dt
table = mutate(table, daytype  = as.factor(dt))
table
dt = as.character(lapply(table$date, function(x) {if (weekdays(x, abbreviate = TRUE) == "Sat" | weekdays(x, abbreviate == TRUE) == "Sun") return("weekend") else return("weekday")}))
dt = as.character(lapply(table$date, function(x) {if (weekdays(x, abbreviate = TRUE) == "Sat" | weekdays(x, abbreviate = TRUE) == "Sun") return("weekend") else return("weekday")}))
dt
```{r, results='hide', message=FALSE}
table = read.csv("repdata-data-activity/activity.csv")
table[,2] = as.Date(table[,2]) ## making dates have date format
library(dplyr) ## loading useful libraries
library(ggplot2)
Sys.setlocale("LC_TIME","English") ## setting weekdays names to english
dt = as.character(lapply(table$date,           ## creating vector containg what we need
function(x) {
if (weekdays(x, abbreviate = TRUE) == "Sat" |
weekdays(x,   abbreviate = TRUE) == "Sun")
return("weekend")
else return("weekday")
}))
table_week = mutate(table, daytype = as.factor(dt)) ## adding new  column
dt
table_week_int = group_by(table_week, c(daytype, interval))
table_week_int = group_by(table_week, daytype, interval)
avg_steps = summarise(table_week_int, avg = mean(steps, na.rm = TRUE))
ggplot(data = avg_steps, x = interval, y = avg, facet_grid(daytype, .~))
ggplot(data = avg_steps, x = interval, y = avg)
ggplot(data = avg_steps, x = interval, y = avg, geom = "line")
plot(avg_steps$interval, avg_steps$avg)
ggplot(data = avg_steps, x = interval, y = avg, geom = "line")
ggplot(data = avg_steps, x = interval, y = avg) + geom_line()
ggplot(data = avg_steps, x = interval, y = avg) + geom_line("blue")
ggplot(avg_steps,  aes(interval, avg))
ggplot(avg_steps,  aes(interval, avg), geom = "line")
ggplot(avg_steps,  aes(interval, avg)) + geom_lines()
ggplot(avg_steps,  aes(interval, avg)) + geom_line()
ggplot(avg_steps,  aes(interval, avg)) + geom_line() + facte_grid(daytype, .~)
ggplot(avg_steps,  aes(interval, avg)) + geom_line() + facet_grid(daytype, .~)
ggplot(avg_steps,  aes(interval, avg)) + geom_line() + facet_grid(daytype, ~.)
ggplot(avg_steps,  aes(interval, avg)) + geom_line() + facet_grid(daytype, ~.)
names(avg_steps)
ggplot(avg_steps,  aes(interval, avg)) + geom_line() + facet_grid(daytype ~.)
knit2html("PA1_template.Rmd")
library(knitr)
knit2html("PA1_template.Rmd")
setwd(".~/Peer_Assesment1/RepData_PeerAssessment1")
setwd(".~")
setwd(".~")
setwd(".~/Peer_Assesment1/RepData_PeerAssessment1")
setwd(".~/Peer_Assesment1/RepData_PeerAssessment1")
getwd()
cd..
setwd("C:/Users/Korneliusz")
setwd("C:/Users/Korneliusz/Peer_Assesment1/RepData_PeerAssessment1")
getwd()
library(knitr)
knit2html("PA1_template.Rmd")
